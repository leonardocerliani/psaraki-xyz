{
    "type": [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2
    ],
    "data": [
        "\r",
        " plot: [4,2] [=================================>----------------------------] 56% est: 1s ",
        "\r",
        " plot: [4,3] [===================================>--------------------------] 58% est: 1s ",
        "\r",
        " plot: [4,4] [=====================================>------------------------] 61% est: 1s ",
        "\r",
        " plot: [4,5] [=======================================>----------------------] 64% est: 1s ",
        "\r",
        " plot: [4,6] [========================================>---------------------] 67% est: 1s ",
        "\r",
        " plot: [5,1] [==========================================>-------------------] 69% est: 1s ",
        "\r",
        " plot: [5,2] [============================================>-----------------] 72% est: 1s ",
        "\r",
        " plot: [5,3] [=============================================>----------------] 75% est: 1s ",
        "\r",
        " plot: [5,4] [===============================================>--------------] 78% est: 1s ",
        "\r",
        " plot: [5,5] [=================================================>------------] 81% est: 0s ",
        "\r",
        " plot: [5,6] [===================================================>----------] 83% est: 0s ",
        "\r",
        " plot: [6,1] [====================================================>---------] 86% est: 0s ",
        "\r",
        " plot: [6,2] [======================================================>-------] 89% est: 0s ",
        "\r",
        " plot: [6,3] [========================================================>-----] 92% est: 0s ",
        "\r",
        " plot: [6,4] [==========================================================>---] 94% est: 0s ",
        "\r",
        " plot: [6,5] [===========================================================>--] 97% est: 0s ",
        "\r",
        " plot: [6,6] [==============================================================]100% est: 0s ",
        "\r                                                                                          ",
        "\r",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>% ",
        "+ ",
        " select(TTP, device) %>%  ",
        "+ ",
        " filter(device != \"tablet\")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `logTTP` doesn't exist.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mggstatsplot\u001B[22m::ggbetweenstats(data = ddf, x = device, y = logTTP)\n\u001B[90m 6. \u001B[39m\u001B[1m\u001B[94mdplyr:::select.data.frame(\u001B[39m\u001B[22m...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "df",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>% ",
        "+ ",
        " select(TTP, device) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(device != \"tablet\")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "exp(5:8)",
        "[1]  148.4132  403.4288 1096.6332 2980.9580\n",
        "> ",
        "exp(5:8) %>% round()",
        "[1]  148  403 1097 2981\n",
        "> ",
        "exp(5:8) %>% round() %>% seconds_to_period()",
        "[1] \"2M 28S\"  \"6M 43S\"  \"18M 17S\" \"49M 41S\"\n",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>% ",
        "+ ",
        " select(TTP, device) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(device != \"tablet\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>% ",
        "+ ",
        " select(TTP, device) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(device != \"tablet\") %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = logTTP",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[38;5;232mScale for \u001B[32my\u001B[38;5;232m is already present.\nAdding another scale for \u001B[32my\u001B[38;5;232m, which will replace the existing scale.\u001B[39m\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>%",
        "+ ",
        " select(TTP, browser) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(browser %in% c(\"Chrome\",\"Safari\")) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = logTTP",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[38;5;232mScale for \u001B[32my\u001B[38;5;232m is already present.\nAdding another scale for \u001B[32my\u001B[38;5;232m, which will replace the existing scale.\u001B[39m\n",
        "> ",
        "",
        "> ",
        "df$campaign %>% unique",
        "[1] <NA>       (organic)  (referral) (direct)  \nLevels: (direct) (organic) (referral)\n",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " select(TTP,campaign) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(campaign = as.character(campaign)) %>% ",
        "+ ",
        " mutate(campaign = ifelse(is.na(campaign),\"(none)\",campaign)) %>% ",
        "+ ",
        " filter(campaign %in% c(\"(none)\",\"(referral)\",\"(organic)\",\"(direct)\"))",
        "> ",
        " # group_by(campaign) %>% ",
        "> ",
        " # count()",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "df$campaign %>% unique",
        "[1] <NA>       (organic)  (referral) (direct)  \nLevels: (direct) (organic) (referral)\n",
        "> ",
        " ",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " select(TTP,campaign) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(campaign = as.character(campaign)) %>% ",
        "+ ",
        " mutate(campaign = ifelse(is.na(campaign),\"(none)\",campaign)) %>% ",
        "+ ",
        " filter(campaign %in% c(\"(none)\",\"(referral)\"))",
        "> ",
        " # group_by(campaign) %>% ",
        "> ",
        " # count()",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "df$campaign %>% unique",
        "[1] <NA>       (organic)  (referral) (direct)  \nLevels: (direct) (organic) (referral)\n",
        "> ",
        " ",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = TTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = TTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = TTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = campaign,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `browser` doesn't exist.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mggstatsplot\u001B[22m::ggbetweenstats(...)\n\u001B[90m 6. \u001B[39m\u001B[1m\u001B[94mdplyr:::select.data.frame(\u001B[39m\u001B[22m...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>%",
        "+ ",
        " select(TTP, browser) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(browser %in% c(\"Chrome\",\"Safari\")) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `device` doesn't exist.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mggstatsplot\u001B[22m::ggbetweenstats(...)\n\u001B[90m 6. \u001B[39m\u001B[1m\u001B[94mdplyr:::select.data.frame(\u001B[39m\u001B[22m...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>% ",
        "+ ",
        " select(TTP, device) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(device != \"tablet\")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = device,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `browser` doesn't exist.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mggstatsplot\u001B[22m::ggbetweenstats(...)\n\u001B[90m 6. \u001B[39m\u001B[1m\u001B[94mdplyr:::select.data.frame(\u001B[39m\u001B[22m...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>%",
        "+ ",
        " select(TTP, browser) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(browser %in% c(\"Chrome\",\"Safari\")) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>%",
        "+ ",
        " select(TTP, browser) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(browser %in% c(\"Chrome\",\"Safari\")) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = logTTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "ddf <- df %>%",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " filter(country == \"United States\") %>%",
        "+ ",
        " select(TTP, browser) %>% ",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " filter(browser %in% c(\"Chrome\",\"Safari\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = browser,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, is_on_sale) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(is_on_sale = ifelse(is_on_sale == 0, \"regular_price\",\"on_sale\")) %>% ",
        "+ ",
        " mutate(is_on_sale = factor(is_on_sale))",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "x1 <- rnorm(1000, mean = 0)",
        "> ",
        "x2 <- rnorm(1000, mean = 1)",
        "> ",
        "",
        "> ",
        "wilcox.test(x1,x2)",
        "\n\tWilcoxon rank sum test with continuity correction\n\ndata:  x1 and x2\nW = 241701, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n",
        "> ",
        "?wilcox.test(x1,x2)",
        "> ",
        "wilcox.test(x1,x2, conf.int = T)",
        "\n\tWilcoxon rank sum test with continuity correction\n\ndata:  x1 and x2\nW = 241701, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n -1.1104040 -0.9267591\nsample estimates:\ndifference in location \n             -1.018123 \n\n",
        "> ",
        "wilcox.test(x2,x1, conf.int = T)",
        "\n\tWilcoxon rank sum test with continuity correction\n\ndata:  x2 and x1\nW = 758299, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n 0.9267591 1.1104040\nsample estimates:\ndifference in location \n              1.018125 \n\n",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, is_on_sale) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(is_on_sale = ifelse(is_on_sale == 0, \"regular_price\",\"on_sale\")) %>% ",
        "+ ",
        " mutate(is_on_sale = factor(is_on_sale)) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = logTTP,",
        "+ ",
        "   ylab = \"TTP hms\"",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[38;5;232mScale for \u001B[32my\u001B[38;5;232m is already present.\nAdding another scale for \u001B[32my\u001B[38;5;232m, which will replace the existing scale.\u001B[39m\n",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = logTTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = logTTP,",
        "+ ",
        "   ylab = \"TTP hms\"",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[38;5;232mScale for \u001B[32my\u001B[38;5;232m is already present.\nAdding another scale for \u001B[32my\u001B[38;5;232m, which will replace the existing scale.\u001B[39m\n",
        "> ",
        "df",
        "> ",
        "df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date)",
        "> ",
        "df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 ))",
        "> ",
        "df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " count(is_returning_customer)",
        "> ",
        "df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " ungroup() %>% ",
        "+ ",
        " count(is_returning_customer)",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " ungroup()",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = logTTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = logTTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = logTTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = logTTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `is_on_sale` doesn't exist.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mggstatsplot\u001B[22m::ggbetweenstats(...)\n\u001B[90m 6. \u001B[39m\u001B[1m\u001B[94mdplyr:::select.data.frame(\u001B[39m\u001B[22m...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, is_on_sale) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(is_on_sale = ifelse(is_on_sale == 0, \"regular_price\",\"on_sale\")) %>% ",
        "+ ",
        " mutate(is_on_sale = factor(is_on_sale)) %>% ",
        "+ ",
        " mutate(logTTP_hms = logTTP_to_hms(logTTP) )",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = logTTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ") + scale_y_continuous(breaks = c(5,6,7,8), labels = logTTP_to_hms(5:8))",
        "\u001B[38;5;232mScale for \u001B[32my\u001B[38;5;232m is already present.\nAdding another scale for \u001B[32my\u001B[38;5;232m, which will replace the existing scale.\u001B[39m\n",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, is_on_sale) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(is_on_sale = ifelse(is_on_sale == 0, \"regular_price\",\"on_sale\")) %>% ",
        "+ ",
        " mutate(is_on_sale = factor(is_on_sale)) ",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   ylab = \"TTP hms\",",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, is_on_sale) %>%",
        "+ ",
        " mutate(logTTP = log(TTP)) %>% ",
        "+ ",
        " mutate(is_on_sale = ifelse(is_on_sale == 0, \"regular_price\",\"on_sale\")) %>% ",
        "+ ",
        " mutate(is_on_sale = factor(is_on_sale)) ",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        "   data = ddf,",
        "+ ",
        "   x = is_on_sale,",
        "+ ",
        "   y = TTP,",
        "+ ",
        "   type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " ungroup()",
        "> ",
        "",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = TTP,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date, total_due) %>%",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " ungroup()",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = total_due,",
        "+ ",
        " type = \"parametric\"",
        "+ ",
        ")",
        "> ",
        "ddf <- df %>% ",
        "+ ",
        " select(TTP, logTTP, user_pseudo_id, event_date, total_due) %>%",
        "+ ",
        " mutate(log_total_due = log(total_due)) %>% ",
        "+ ",
        " group_by(user_pseudo_id) %>% ",
        "+ ",
        " mutate(is_returning_customer = ifelse( event_date == min(event_date), 0, 1 )) %>% ",
        "+ ",
        " ungroup()",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = total_due,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "> ",
        "ggbetweenstats(",
        "+ ",
        " data = ddf,",
        "+ ",
        " x = is_returning_customer,",
        "+ ",
        " y = log_total_due,",
        "+ ",
        " type = \"nonparametric\"",
        "+ ",
        ")",
        "Warning:",
        " \u001B[38;5;232mRemoved 299 rows containing non-finite values (`stat_boxplot()`).\u001B[39m\n",
        "> ",
        "rm(list=ls())",
        "\nRestarting R session...\n\n"
    ]
}